-- CHAIN --

1. const chain = new Chain();  새로운 체인이라는 함수를 실행시키고 그 값을 chain 이라는 변수에 넣는다.

--------------------------------------------------------------------------------------------변수 설정--------

2. class chain{ } 이 실행 되는데 #chain 은 암호화 되어있으며 , Difficuty_adjust_interval(난이도를 결정하는 블록의 갯수) , BLOCK_GENERATION_INTERVAL(블록 하나당 생성에 걸리는 시간) ,#TIME_UNIT(블록당 생성시간)을 변수로 잡는다.

--------------------------------------------------------------------------------------------초기값 설정 ------

constructor : < class 형식의 초기값 설정> :

3. 초기값으로는 암호화된 변수로 설정된 체인은 빈배열([])로 선언하고

4. 초기블록(genesis)에 새로운 블록을 생성하고 string data값과, 만들어지는 시간을(new Date() 매서드로) 추가한다.

5. 그리고 초기 블록값 빈배열에 제네시스 블록을 추가한다.-

------------------------------------------------------------------------------------블록 생성시 바뀌는 설정-----

6. get chain():< 체인 >  : 블록이 추가 되었을때 기존에 있었던 배열을 복사해서 , 추가된 암호화된  새로운 배열을 저장한다. 

7. get lastBlock():<체인안의 마지막 블록> : 현재 존재하는 체인의 길이 -1 을  체인의 index값으로 설정한다.

8. get config() : <난이도 제어하는 함수> : 이며 현재 존재하는 블록의 난이도와 생성되는 시간을  변수로 저장합니다

9.get adjustmentBlock() : <블록 재정의> : length(길이)를 현재 블록의 길이로 정의 , interval(반복되는 기준의 정의)을 전체 길이에서 난이도(DIFFICULTY== 10)를 뺸걸로 선언한다. 만약 interval(반복)의 값이 0보다 작으면 체인의 배열의 0번째를 반환한다. | 1 cycle == length(1) ++ , interval(-9) -- |

------------------------------------------------------------------------------------------

10. addBlock(): <블록 추가> : 새 블록을  data 부분을 매개변수로 받아 (lastblock,adjustmentblock,config) 를 설정하고  add2chain 으로 (lastblock,adjustmentblock,config)를 매개변수로 보낸다.

11. add2Chain() : <생성된 블록의 유효성 검사> : addBlock() 함수를 실행후 생성된 블럭을 유효성 검사해 error가  포함되  있다면 빈값을 없다면 현재 체인 배열에 생성된 블럭을 넣는다. 
